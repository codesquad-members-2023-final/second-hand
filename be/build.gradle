buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.14'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'jacoco'
}

group = 'com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}
ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {

    //db
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //Qurydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    //spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    //Webflux
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    //Test Containers
    implementation platform('org.testcontainers:testcontainers-bom:1.19.1') //import bom
    testImplementation "org.testcontainers:testcontainers:1.19.1"
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation('org.testcontainers:mysql') //no version specified
   // testImplementation 'org.testcontainers:testcontainers:1.17.6' // Use the latest version

    //Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'

    // REST Docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //aws
    implementation 'com.amazonaws:aws-java-sdk-core:1.12.429'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.429'
    implementation 'software.amazon.awssdk:s3:2.16.83'

    // Fixture 생성 라이브러리
    testImplementation("com.navercorp.fixturemonkey:fixture-monkey-starter:0.6.8")
    testImplementation("com.navercorp.fixturemonkey:fixture-monkey-javax-validation:0.6.8")
}

/** QueryDSL start **/
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
/** QueryDSL end **/

// Test common
tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

/** Jacoco start **/
jacocoTestReport {
    dependsOn "createDocument"

    reports {
        xml.required.set(true)
        html.required.set(true)

        // QueryDSL Q클래스 제외
        def Qdomains = []
        for (qPattern in "**/QA".."**/QZ") {
            Qdomains.add(qPattern + "*")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: [] + Qdomains)
            }))
        }

        xml.destination file("${buildDir}/jacoco/index.xml")
        html.destination file("${buildDir}/jacoco/index.html")
    }
}
/** Jacoco end **/

/** REST Docs start **/
asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    baseDirFollowsSourceFile()

    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

tasks.register('createDocument', Copy) {
    dependsOn asciidoctor

    from file("build/docs/asciidoc")
    into file("src/main/resources/static")
}

tasks.register('displaceDocument', Copy) {
    dependsOn createDocument

    from("${asciidoctor.outputDir}")
    into("build/resources/main/static")
}

bootJar {
    bootJarMainClassName.dependsOn createDocument
    jar.dependsOn createDocument
    dependsOn createDocument
}
/** REST Docs end **/
